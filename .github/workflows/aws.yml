name: Deploy to Amazon ECS

on:
  pull_request:
    branches:
      - develop
      - main
    types:
      - opened
      - reopened
  push:
    branches:
      - develop
      - feat/fase-v3
    tags:
      - '*'

env:
  AWS_REGION: ${{ vars.AWS_REGION }}                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}           # set this to your Amazon ECR repository name
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  SONAR_TOKEN: ${{ vars.SONAR_TOKEN }}

permissions:
  contents: read

jobs:

#  unit-test:
#    name: Run Tests
#    runs-on: ubuntu-latest
#
#    steps:
#
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - name: Setup Java
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      - run: mvn test
#
#      - name: Generate JaCoCo Badge
#        id: jacoco
#        uses: cicirello/jacoco-badge-generator@v2.0.1
#      - name: Log coverage percentage
#        run: |
#          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
#          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
#
#      - name: Upload JaCoCo coverage report
#        uses: actions/upload-artifact@v2
#        with:
#          name: jacoco-report
#          path: target/site/jacoco/

  code-analisys:
    name: Analyze quality gate
    runs-on: ubuntu-latest
#    needs: unit-test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Variable
        run: echo ${{ env.SONAR_TOKEN }}

      - name: Build and analyze
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    environment: production
#    needs: code-analisys
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Setup Java
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#
#      - name: Build Application
#        run: mvn clean package
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          # Build a docker container and
#          # push it to ECR so that it can
#          # be deployed to ECS.
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#      - name: Prepare Deploy
#        run: echo "Fazendo Deploy :)"
#
#
#      - name: Update kube config
#        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
#
#      - name: Deploy to EKS
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#            echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#            sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" infra/deployment-ms-fastfood.yml && \
#            kubectl apply -f infra/deployment-ms-fastfood.yml
#            kubectl apply -f infra/hpa.yml
#            kubectl apply -f infra/metrics.yml
#            kubectl apply -f infra/secrets-opaque.yml
#            kubectl apply -f infra/svc-ms-fastfood.yml
